/*
 *  垃圾回收  
 * 
 *  闭包中的对象清除
 * 
 *  防抖节流
 * 
 *  分批加载（setInterval,加载一万个节点）
 * 
 *  事件委托
 * 
 *  少用with  （可能会泄漏，原因是 JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，
 *  才能在执行过程中快速找到标识符。但如果引擎在代码中发现了 with，它只能简单地假设关于标识符位置的判断都是无效的，因为无法知道传递给 with 用来创建新词法作用域的对象的内容到底是什么。
    最悲观的情况是如果出现了 with ，所有的优化都可能是无意义的。因此引擎会采取最简单的做法就是完全不做任何优化。如果代码大量使用 with 或者 eval()，那么运行起来一定会变得非常慢。
    无论引擎多聪明，试图将这些悲观情况的副作用限制在最小范围内，也无法避免如果没有这些优化，代码会运行得更慢的事实。

 * 
 *    requestAnimationFrame的使用
 * 
 *    script标签中的defer和async
 *      defer
 *      不阻塞浏览器解析 HTML，等解析完 HTML 之后，才会执行 script。
        会并行下载 JavaScript 资源。
        会按照 HTML 中的相对顺序执行脚本。
        会在脚本下载并执行完成之后，才会触发 DOMContentLoaded 事件。
        在脚本执行过程中，一定可以获取到 HTML 中已有的元素。
        defer 属性对模块脚本无效。
        适用于：所有外部脚本（通过 src 引用的 script）。

        async

        不阻塞浏览器解析 HTML，但是 script 下载完成后，会立即中断浏览器解析 HTML，并执行此 script。
        会并行下载 JavaScript 资源。
        互相独立，谁先下载完，谁先执行，没有固定的先后顺序，不可控。
        由于没有确定的执行时机，所以在脚本里面可能会获取不到 HTML 中已有的元素。
        DOMContentLoaded 事件和 script 脚本无相关性，无法确定他们的先后顺序。
        适用于：独立的第三方脚本。


 * 
 *    CDN
 */