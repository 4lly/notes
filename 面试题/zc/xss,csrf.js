/**
 *   xss 脚本注入
 *      不需要做任何登录操作，他会通过合法操作（比如 url 输入，输入框输入），向你的页面注入脚本（js，html 代码块等）
 *      防御：
 *          编码：对用户输入的数据进行 html entity编码，把字符转换成转义字符，encode的作用是将$var等一些字符进行转化，
 *               使得浏览器在最终输出结果上是一致的
 *          过滤：移除用户输入的和事件相关的属性
 *  
 *   csrf跨域请求伪造
 *      在未退出 a 网站的前提下访问 b，b 使用 a 的 cookie去访问服务器
 *      
 *      实现方式：在 b 页面中可以使用一个隐藏的iframe来向 a 发起请求，只要用户 a 没有登出a 网站，临时 cookie一直保存在内存中，
 *              这个时候危险网站 b 就可以拿着cookie 为所欲为了
 * 
 *      防御：
 *         使用验证码或者 token 验证，每次提交表单时需要带上 token，如果 token 不合法，服务器拒绝请求；
 *         通过host+origin来判断是否为合法用户；
 *         给 Cookie 设置SameSite属性，来限制第三方Cookie，里面有三个值，strict，lax，none
 *      strict：最严格的，完全禁止第三方 cookie；但是体验不好，如果有个 github链接，点击跳转就不会携带 cookie，跳转过去一直是未登录状态，
 *      lax：稍微放宽了一些，大多不发送 cookie，但除了 get请求（只包括三种请求：链接，预加载请求，get 表单）以外
 *      none：关闭该设置
 *      
 *   点击劫持
 *       点击劫持是指利用iframe+css的opacity把危险网站设置成透明覆盖到安全的网站上面，使用户误以为在安全的网站上面操作
 *        防范
 *            在 http中配置X-frame-options设置为deny可以禁止被iframe嵌入 
 *    
 */